<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Svea\Instore
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Svea Webpay Instore Api
 *
 * The Instore API's enables cash registers to create Svea orders that the customer can checkout by following a link sent to them by SMS
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Svea\Instore\Model;

use \ArrayAccess;
use \Svea\Instore\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Svea\Instore
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fullName' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'streetAddress' => 'string',
        'coAddress' => 'string',
        'postalCode' => 'string',
        'city' => 'string',
        'countryCode' => 'string',
        'isGeneric' => 'bool',
        'addressLines' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fullName' => null,
        'firstName' => null,
        'lastName' => null,
        'streetAddress' => null,
        'coAddress' => null,
        'postalCode' => null,
        'city' => null,
        'countryCode' => null,
        'isGeneric' => null,
        'addressLines' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fullName' => 'fullName',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'streetAddress' => 'streetAddress',
        'coAddress' => 'coAddress',
        'postalCode' => 'postalCode',
        'city' => 'city',
        'countryCode' => 'countryCode',
        'isGeneric' => 'isGeneric',
        'addressLines' => 'addressLines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fullName' => 'setFullName',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'streetAddress' => 'setStreetAddress',
        'coAddress' => 'setCoAddress',
        'postalCode' => 'setPostalCode',
        'city' => 'setCity',
        'countryCode' => 'setCountryCode',
        'isGeneric' => 'setIsGeneric',
        'addressLines' => 'setAddressLines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fullName' => 'getFullName',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'streetAddress' => 'getStreetAddress',
        'coAddress' => 'getCoAddress',
        'postalCode' => 'getPostalCode',
        'city' => 'getCity',
        'countryCode' => 'getCountryCode',
        'isGeneric' => 'getIsGeneric',
        'addressLines' => 'getAddressLines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fullName'] = isset($data['fullName']) ? $data['fullName'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['streetAddress'] = isset($data['streetAddress']) ? $data['streetAddress'] : null;
        $this->container['coAddress'] = isset($data['coAddress']) ? $data['coAddress'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['isGeneric'] = isset($data['isGeneric']) ? $data['isGeneric'] : null;
        $this->container['addressLines'] = isset($data['addressLines']) ? $data['addressLines'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fullName
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param string $fullName Full name used when completing the checkout
     *
     * @return $this
     */
    public function setFullName($fullName)
    {
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName First name used when completing the checkout
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Last name used when completing the checkout
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets streetAddress
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['streetAddress'];
    }

    /**
     * Sets streetAddress
     *
     * @param string $streetAddress Street address used when completing the checkout
     *
     * @return $this
     */
    public function setStreetAddress($streetAddress)
    {
        $this->container['streetAddress'] = $streetAddress;

        return $this;
    }

    /**
     * Gets coAddress
     *
     * @return string
     */
    public function getCoAddress()
    {
        return $this->container['coAddress'];
    }

    /**
     * Sets coAddress
     *
     * @param string $coAddress C/O address used when completing the checkout
     *
     * @return $this
     */
    public function setCoAddress($coAddress)
    {
        $this->container['coAddress'] = $coAddress;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string $postalCode Postal code used when completing the checkout
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City used when completing the checkout
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode Country code used when completing the checkout
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets isGeneric
     *
     * @return bool
     */
    public function getIsGeneric()
    {
        return $this->container['isGeneric'];
    }

    /**
     * Sets isGeneric
     *
     * @param bool $isGeneric A generic address does not include all of the fields above. Instead it has additional address lines. Used for e.g. international addresses.
     *
     * @return $this
     */
    public function setIsGeneric($isGeneric)
    {
        $this->container['isGeneric'] = $isGeneric;

        return $this;
    }

    /**
     * Gets addressLines
     *
     * @return string[]
     */
    public function getAddressLines()
    {
        return $this->container['addressLines'];
    }

    /**
     * Sets addressLines
     *
     * @param string[] $addressLines Address lines of generic addresses
     *
     * @return $this
     */
    public function setAddressLines($addressLines)
    {
        $this->container['addressLines'] = $addressLines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
