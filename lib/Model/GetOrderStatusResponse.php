<?php
/**
 * GetOrderStatusResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Svea\Instore
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Svea Webpay Instore Api
 *
 * The Instore API's enables cash registers to create Svea orders that the customer can checkout by following a link sent to them by SMS
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Svea\Instore\Model;

use \ArrayAccess;
use \Svea\Instore\ObjectSerializer;

/**
 * GetOrderStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  Svea\Instore
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOrderStatusResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOrderStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantOrderNumber' => 'string',
        'instoreUiUri' => 'string',
        'orderStatus' => 'string',
        'paymentMethodType' => 'string',
        'campaignCode' => 'int',
        'paymentType' => 'string',
        'paymentOrderId' => 'int',
        'customerInformation' => '\Svea\Instore\Model\CustomerInformation',
        'tags' => 'string[]',
        'orderItems' => '\Svea\Instore\Model\OrderItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantOrderNumber' => null,
        'instoreUiUri' => null,
        'orderStatus' => null,
        'paymentMethodType' => null,
        'campaignCode' => 'int64',
        'paymentType' => null,
        'paymentOrderId' => 'int64',
        'customerInformation' => null,
        'tags' => null,
        'orderItems' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantOrderNumber' => 'merchantOrderNumber',
        'instoreUiUri' => 'instoreUiUri',
        'orderStatus' => 'orderStatus',
        'paymentMethodType' => 'paymentMethodType',
        'campaignCode' => 'campaignCode',
        'paymentType' => 'paymentType',
        'paymentOrderId' => 'paymentOrderId',
        'customerInformation' => 'customerInformation',
        'tags' => 'tags',
        'orderItems' => 'orderItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantOrderNumber' => 'setMerchantOrderNumber',
        'instoreUiUri' => 'setInstoreUiUri',
        'orderStatus' => 'setOrderStatus',
        'paymentMethodType' => 'setPaymentMethodType',
        'campaignCode' => 'setCampaignCode',
        'paymentType' => 'setPaymentType',
        'paymentOrderId' => 'setPaymentOrderId',
        'customerInformation' => 'setCustomerInformation',
        'tags' => 'setTags',
        'orderItems' => 'setOrderItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantOrderNumber' => 'getMerchantOrderNumber',
        'instoreUiUri' => 'getInstoreUiUri',
        'orderStatus' => 'getOrderStatus',
        'paymentMethodType' => 'getPaymentMethodType',
        'campaignCode' => 'getCampaignCode',
        'paymentType' => 'getPaymentType',
        'paymentOrderId' => 'getPaymentOrderId',
        'customerInformation' => 'getCustomerInformation',
        'tags' => 'getTags',
        'orderItems' => 'getOrderItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantOrderNumber'] = isset($data['merchantOrderNumber']) ? $data['merchantOrderNumber'] : null;
        $this->container['instoreUiUri'] = isset($data['instoreUiUri']) ? $data['instoreUiUri'] : null;
        $this->container['orderStatus'] = isset($data['orderStatus']) ? $data['orderStatus'] : null;
        $this->container['paymentMethodType'] = isset($data['paymentMethodType']) ? $data['paymentMethodType'] : null;
        $this->container['campaignCode'] = isset($data['campaignCode']) ? $data['campaignCode'] : null;
        $this->container['paymentType'] = isset($data['paymentType']) ? $data['paymentType'] : null;
        $this->container['paymentOrderId'] = isset($data['paymentOrderId']) ? $data['paymentOrderId'] : null;
        $this->container['customerInformation'] = isset($data['customerInformation']) ? $data['customerInformation'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['orderItems'] = isset($data['orderItems']) ? $data['orderItems'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantOrderNumber
     *
     * @return string
     */
    public function getMerchantOrderNumber()
    {
        return $this->container['merchantOrderNumber'];
    }

    /**
     * Sets merchantOrderNumber
     *
     * @param string $merchantOrderNumber The order number that identifies the order for the merchant
     *
     * @return $this
     */
    public function setMerchantOrderNumber($merchantOrderNumber)
    {
        $this->container['merchantOrderNumber'] = $merchantOrderNumber;

        return $this;
    }

    /**
     * Gets instoreUiUri
     *
     * @return string
     */
    public function getInstoreUiUri()
    {
        return $this->container['instoreUiUri'];
    }

    /**
     * Sets instoreUiUri
     *
     * @param string $instoreUiUri URL to the site where the customer can complete the order. This can be used if the SMS doesn't reach the mobile phone, so it is recommended to display in the cash register while waiting for the checkout to be completed.
     *
     * @return $this
     */
    public function setInstoreUiUri($instoreUiUri)
    {
        $this->container['instoreUiUri'] = $instoreUiUri;

        return $this;
    }

    /**
     * Gets orderStatus
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param string $orderStatus Status of the order. It can be Active, Completed or Canceled
     *
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets paymentMethodType
     *
     * @return string
     */
    public function getPaymentMethodType()
    {
        return $this->container['paymentMethodType'];
    }

    /**
     * Sets paymentMethodType
     *
     * @param string $paymentMethodType Payment method type. Set when order is Completed
     *
     * @return $this
     */
    public function setPaymentMethodType($paymentMethodType)
    {
        $this->container['paymentMethodType'] = $paymentMethodType;

        return $this;
    }

    /**
     * Gets campaignCode
     *
     * @return int
     */
    public function getCampaignCode()
    {
        return $this->container['campaignCode'];
    }

    /**
     * Sets campaignCode
     *
     * @param int $campaignCode Set when order is Completed, showing campaign code (if used). Only available for PaymentPlan
     *
     * @return $this
     */
    public function setCampaignCode($campaignCode)
    {
        $this->container['campaignCode'] = $campaignCode;

        return $this;
    }

    /**
     * Gets paymentType
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['paymentType'];
    }

    /**
     * Sets paymentType
     *
     * @param string $paymentType Payment type. Set when order is Completed
     *
     * @return $this
     */
    public function setPaymentType($paymentType)
    {
        $this->container['paymentType'] = $paymentType;

        return $this;
    }

    /**
     * Gets paymentOrderId
     *
     * @return int
     */
    public function getPaymentOrderId()
    {
        return $this->container['paymentOrderId'];
    }

    /**
     * Sets paymentOrderId
     *
     * @param int $paymentOrderId Sveas order id. Use this when contacting Svea support if you experience any issues with an order.
     *
     * @return $this
     */
    public function setPaymentOrderId($paymentOrderId)
    {
        $this->container['paymentOrderId'] = $paymentOrderId;

        return $this;
    }

    /**
     * Gets customerInformation
     *
     * @return \Svea\Instore\Model\CustomerInformation
     */
    public function getCustomerInformation()
    {
        return $this->container['customerInformation'];
    }

    /**
     * Sets customerInformation
     *
     * @param \Svea\Instore\Model\CustomerInformation $customerInformation customerInformation
     *
     * @return $this
     */
    public function setCustomerInformation($customerInformation)
    {
        $this->container['customerInformation'] = $customerInformation;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Tags set on the order when it was created
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets orderItems
     *
     * @return \Svea\Instore\Model\OrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['orderItems'];
    }

    /**
     * Sets orderItems
     *
     * @param \Svea\Instore\Model\OrderItem[] $orderItems A list of items in the order
     *
     * @return $this
     */
    public function setOrderItems($orderItems)
    {
        $this->container['orderItems'] = $orderItems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
