<?php
/**
 * CreateOrderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Svea\Instore
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Svea Webpay Instore Api
 *
 * The Instore API's enables cash registers to create Svea orders that the customer can checkout by following a link sent to them by SMS
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Svea\Instore\Model;

use \ArrayAccess;
use \Svea\Instore\ObjectSerializer;

/**
 * CreateOrderRequest Class Doc Comment
 *
 * @category Class
 * @package  Svea\Instore
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateOrderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchantOrderNumber' => 'string',
        'countryCode' => 'string',
        'currency' => 'string',
        'mobilePhoneNumber' => 'string',
        'tags' => 'string[]',
        'orderItems' => '\Svea\Instore\Model\OrderItem[]',
        'callbackUri' => 'string',
        'termsUri' => 'string',
        'deferredDelivery' => 'bool',
        'minutesUntilLinkExpires' => 'double',
        'presetValues' => '\Svea\Instore\Model\PresetValue[]',
        'requireElectronicIdAuthentication' => 'bool',
        'merchantName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchantOrderNumber' => null,
        'countryCode' => null,
        'currency' => null,
        'mobilePhoneNumber' => null,
        'tags' => null,
        'orderItems' => null,
        'callbackUri' => null,
        'termsUri' => null,
        'deferredDelivery' => null,
        'minutesUntilLinkExpires' => 'double',
        'presetValues' => null,
        'requireElectronicIdAuthentication' => null,
        'merchantName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantOrderNumber' => 'merchantOrderNumber',
        'countryCode' => 'countryCode',
        'currency' => 'currency',
        'mobilePhoneNumber' => 'mobilePhoneNumber',
        'tags' => 'tags',
        'orderItems' => 'orderItems',
        'callbackUri' => 'callbackUri',
        'termsUri' => 'termsUri',
        'deferredDelivery' => 'deferredDelivery',
        'minutesUntilLinkExpires' => 'minutesUntilLinkExpires',
        'presetValues' => 'presetValues',
        'requireElectronicIdAuthentication' => 'requireElectronicIdAuthentication',
        'merchantName' => 'merchantName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantOrderNumber' => 'setMerchantOrderNumber',
        'countryCode' => 'setCountryCode',
        'currency' => 'setCurrency',
        'mobilePhoneNumber' => 'setMobilePhoneNumber',
        'tags' => 'setTags',
        'orderItems' => 'setOrderItems',
        'callbackUri' => 'setCallbackUri',
        'termsUri' => 'setTermsUri',
        'deferredDelivery' => 'setDeferredDelivery',
        'minutesUntilLinkExpires' => 'setMinutesUntilLinkExpires',
        'presetValues' => 'setPresetValues',
        'requireElectronicIdAuthentication' => 'setRequireElectronicIdAuthentication',
        'merchantName' => 'setMerchantName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantOrderNumber' => 'getMerchantOrderNumber',
        'countryCode' => 'getCountryCode',
        'currency' => 'getCurrency',
        'mobilePhoneNumber' => 'getMobilePhoneNumber',
        'tags' => 'getTags',
        'orderItems' => 'getOrderItems',
        'callbackUri' => 'getCallbackUri',
        'termsUri' => 'getTermsUri',
        'deferredDelivery' => 'getDeferredDelivery',
        'minutesUntilLinkExpires' => 'getMinutesUntilLinkExpires',
        'presetValues' => 'getPresetValues',
        'requireElectronicIdAuthentication' => 'getRequireElectronicIdAuthentication',
        'merchantName' => 'getMerchantName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantOrderNumber'] = isset($data['merchantOrderNumber']) ? $data['merchantOrderNumber'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['mobilePhoneNumber'] = isset($data['mobilePhoneNumber']) ? $data['mobilePhoneNumber'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['orderItems'] = isset($data['orderItems']) ? $data['orderItems'] : null;
        $this->container['callbackUri'] = isset($data['callbackUri']) ? $data['callbackUri'] : null;
        $this->container['termsUri'] = isset($data['termsUri']) ? $data['termsUri'] : null;
        $this->container['deferredDelivery'] = isset($data['deferredDelivery']) ? $data['deferredDelivery'] : false;
        $this->container['minutesUntilLinkExpires'] = isset($data['minutesUntilLinkExpires']) ? $data['minutesUntilLinkExpires'] : null;
        $this->container['presetValues'] = isset($data['presetValues']) ? $data['presetValues'] : null;
        $this->container['requireElectronicIdAuthentication'] = isset($data['requireElectronicIdAuthentication']) ? $data['requireElectronicIdAuthentication'] : true;
        $this->container['merchantName'] = isset($data['merchantName']) ? $data['merchantName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantOrderNumber'] === null) {
            $invalidProperties[] = "'merchantOrderNumber' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['orderItems'] === null) {
            $invalidProperties[] = "'orderItems' can't be null";
        }
        if ($this->container['termsUri'] === null) {
            $invalidProperties[] = "'termsUri' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantOrderNumber
     *
     * @return string
     */
    public function getMerchantOrderNumber()
    {
        return $this->container['merchantOrderNumber'];
    }

    /**
     * Sets merchantOrderNumber
     *
     * @param string $merchantOrderNumber The merchant order number. It must be unique for the merchant
     *
     * @return $this
     */
    public function setMerchantOrderNumber($merchantOrderNumber)
    {
        $this->container['merchantOrderNumber'] = $merchantOrderNumber;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode Country code for the merchant. The country code must be preconfigured as valid for the merchant to be valid.
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency. ISO currency symbol, e.g. SEK, NOK, EUR. If not set the default currency for the CountryCode is used.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets mobilePhoneNumber
     *
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobilePhoneNumber'];
    }

    /**
     * Sets mobilePhoneNumber
     *
     * @param string $mobilePhoneNumber Mobile phone number to the end customer. If provided, an SMS with a link to the checkout page will be sent to the number.
     *
     * @return $this
     */
    public function setMobilePhoneNumber($mobilePhoneNumber)
    {
        $this->container['mobilePhoneNumber'] = $mobilePhoneNumber;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags A list of strings that can be used to identify the order, and provide reporting on e.g. orders from a certain store.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets orderItems
     *
     * @return \Svea\Instore\Model\OrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['orderItems'];
    }

    /**
     * Sets orderItems
     *
     * @param \Svea\Instore\Model\OrderItem[] $orderItems A list of items in the order
     *
     * @return $this
     */
    public function setOrderItems($orderItems)
    {
        $this->container['orderItems'] = $orderItems;

        return $this;
    }

    /**
     * Gets callbackUri
     *
     * @return string
     */
    public function getCallbackUri()
    {
        return $this->container['callbackUri'];
    }

    /**
     * Sets callbackUri
     *
     * @param string $callbackUri A callback can be done when the checkout is completed. A HTTP POST message with the merchant order number is done to the URI entered.   If no callback is wanted, leave this field blank. Polling for completed order status to find completed orders is then done by HTTP GET on the order status endpoint.  Note! No more information about the order is sent with the push. To retrieve all information about the order a HTTP GET on the order status endpoint needs to be done as well.
     *
     * @return $this
     */
    public function setCallbackUri($callbackUri)
    {
        $this->container['callbackUri'] = $callbackUri;

        return $this;
    }

    /**
     * Gets termsUri
     *
     * @return string
     */
    public function getTermsUri()
    {
        return $this->container['termsUri'];
    }

    /**
     * Sets termsUri
     *
     * @param string $termsUri A link to where the merchant terms and conditions are hosted.
     *
     * @return $this
     */
    public function setTermsUri($termsUri)
    {
        $this->container['termsUri'] = $termsUri;

        return $this;
    }

    /**
     * Gets deferredDelivery
     *
     * @return bool
     */
    public function getDeferredDelivery()
    {
        return $this->container['deferredDelivery'];
    }

    /**
     * Sets deferredDelivery
     *
     * @param bool $deferredDelivery All orders will be marked as delivered in the Payment Admin system by default, allowing the invoice to be sent to the end user. Set this to 'true' if the order should not be marked as delivered, e.g. if the goods has not been delivered yet.
     *
     * @return $this
     */
    public function setDeferredDelivery($deferredDelivery)
    {
        $this->container['deferredDelivery'] = $deferredDelivery;

        return $this;
    }

    /**
     * Gets minutesUntilLinkExpires
     *
     * @return double
     */
    public function getMinutesUntilLinkExpires()
    {
        return $this->container['minutesUntilLinkExpires'];
    }

    /**
     * Sets minutesUntilLinkExpires
     *
     * @param double $minutesUntilLinkExpires Number of minutes the Instore link will be available. If no value is present Instore will use the default value of 20 minutes. Value has to be greater then 0.
     *
     * @return $this
     */
    public function setMinutesUntilLinkExpires($minutesUntilLinkExpires)
    {
        $this->container['minutesUntilLinkExpires'] = $minutesUntilLinkExpires;

        return $this;
    }

    /**
     * Gets presetValues
     *
     * @return \Svea\Instore\Model\PresetValue[]
     */
    public function getPresetValues()
    {
        return $this->container['presetValues'];
    }

    /**
     * Sets presetValues
     *
     * @param \Svea\Instore\Model\PresetValue[] $presetValues List of attributes to preset values for on the checkout. See model documentation for valid attributes and value limitations.
     *
     * @return $this
     */
    public function setPresetValues($presetValues)
    {
        $this->container['presetValues'] = $presetValues;

        return $this;
    }

    /**
     * Gets requireElectronicIdAuthentication
     *
     * @return bool
     */
    public function getRequireElectronicIdAuthentication()
    {
        return $this->container['requireElectronicIdAuthentication'];
    }

    /**
     * Sets requireElectronicIdAuthentication
     *
     * @param bool $requireElectronicIdAuthentication Possibility to disable electronic id authentication (e.g. BankID), for orders that are not completed in a physical store and therefore can use the same flow as a web order.
     *
     * @return $this
     */
    public function setRequireElectronicIdAuthentication($requireElectronicIdAuthentication)
    {
        $this->container['requireElectronicIdAuthentication'] = $requireElectronicIdAuthentication;

        return $this;
    }

    /**
     * Gets merchantName
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName
     *
     * @param string $merchantName merchantName
     *
     * @return $this
     */
    public function setMerchantName($merchantName)
    {
        $this->container['merchantName'] = $merchantName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
